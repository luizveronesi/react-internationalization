[{"question":"In Hibernate, what is the difference between session.get() and session.load()?","answers":["session.get() returns a fully initialized instance, session.load() returns a proxy","session.get() returns a proxy, session.load() returns a fully initialized instance","Both methods return a fully initialized instance","session.load() throws an exception if the object is not found, while session.get() returns null"],"correct":0,"translations":{"it":["Per cosa viene utilizzato principalmente Amazon S3?","session.get() restituisce un'istanza completamente inizializzata, session.load() restituisce un proxy","session.get() restituisce un proxy, session.load() restituisce un'istanza completamente inizializzata","Entrambi i metodi restituiscono un'istanza completamente inizializzata","session.load() genera un'eccezione se l'oggetto non viene trovato, mentre session.get() restituisce null"]}},{"question":"What does the @Entity annotation in JPA represent?","answers":["It marks a class as a primary key","It specifies the table name in the database","It indicates that the class is an entity in the JPA context","It is used to define named queries"],"correct":2,"translations":{"it":["Quale servizio AWS è progettato per analisi scalabili di data warehouse?","Segna una classe come chiave primaria","Specifica il nome della tabella nel database","Indica che la classe è un'entità nel contesto JPA","Viene utilizzato per definire query denominate"]}},{"question":"How do you define a many-to-many relationship in JPA?","answers":["Using @ManyToMany annotation","Using @OneToMany annotation on both sides","Using @OneToMany annotation on one side and @ManyToOne on the other","It is not possible to define a many-to-many relationship in JPA"],"correct":0,"translations":{"it":["Come puoi gestire in modo sicuro l'accesso ai servizi e alle risorse AWS?","Utilizzando l'annotazione @ManyToMany","Utilizzando l'annotazione @OneToMany su entrambi i lati","Utilizzando l'annotazione @OneToMany su un lato e @ManyToOne sull'altro","Non è possibile definire una relazione molti-a-molti in JPA"]}},{"question":"Why is it recommended to use @Transactional annotation when using JPA in Spring?","answers":["To handle lazy loading exceptions","To improve the performance of queries","To ensure that database operations are performed within a transaction context","To automatically close the EntityManager"],"correct":2,"translations":{"it":["Quale dei seguenti è un servizio di calcolo serverless completamente gestito in AWS?","Per gestire le eccezioni di caricamento pigro","Per migliorare le prestazioni delle query","Per garantire che le operazioni sul database siano eseguite all'interno di un contesto di transazione","Per chiudere automaticamente EntityManager"]}},{"question":"Considering the code, what will be the output?","answers":["The parent object will be saved, but the child object won't be saved","Both parent and child objects will be saved","An exception will be thrown","The child object will overwrite the parent object"],"correct":1,"code":"Parent parent = new Parent();\nChild child = new Child();\nparent.addChild(child);\nentityManager.persist(parent);","translations":{"it":["Che tipo di servizio è Amazon EC2?","L'oggetto padre verrà salvato, ma l'oggetto figlio non verrà salvato","Sia l'oggetto padre che l'oggetto figlio verranno salvati","Verrà generata un'eccezione","L'oggetto figlio sovrascriverà l'oggetto padre"]}},{"question":"In JPA Criteria API, what does the method 'criteriaBuilder.equal()' do?","answers":["It checks if two entities are identical","It creates an equality comparison expression","It creates a greater-than comparison expression","It creates a less-than comparison expression"],"correct":1,"translations":{"it":["Cosa farà il seguente comando AWS CLI?","Verifica se due entità sono identiche","Crea un'espressione di confronto di uguaglianza","Crea un'espressione di confronto maggiore di","Crea un'espressione di confronto minore di"]}},{"question":"Given the following code snippet, what does it depict?","answers":["A single table inheritance strategy","A joined table inheritance strategy","A table-per-class strategy","A mapped superclass strategy"],"correct":0,"code":"@Entity\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@DiscriminatorColumn(name = \"type\")\npublic class Parent { }\n\n@Entity\npublic class ChildA extends Parent { }\n\n@Entity\npublic class ChildB extends Parent { }","translations":{"it":["In un template CloudFormation, qual è lo scopo della sezione 'Resources'?","Una strategia di ereditarietà tabella singola","Una strategia di ereditarietà tabella unita","Una strategia tabella per classe","Una strategia di superclass mappata"]}},{"question":"What is the purpose of the @Cascade annotation in Hibernate?","answers":["To define cascading style sheets","To control the cascade of operations to associated entities","To configure lazy loading","To configure eager fetching"],"correct":1,"translations":{"it":["Quale sarà il risultato della seguente policy JSON?","Per definire fogli di stile a cascata","Per controllare la cascata delle operazioni sulle entità associate","Per configurare il caricamento pigro","Per configurare il recupero rapido"]}},{"question":"Examine the following configuration. What will be the default fetch type for the 'categories' field?","answers":["Eager","Lazy","Immediate","Basic"],"correct":1,"code":"@Entity\npublic class Product {\n\n    @ManyToMany\n    private List<Category> categories;\n}","translations":{"it":["Cosa creerà il seguente codice CloudFormation?","Eager","Lazy","Immediato","Basic"]}},{"question":"In Hibernate, what does the second-level cache store?","answers":["SQL queries","Session-related data","Entity data across sessions","Transaction history"],"correct":2,"translations":{"it":["Cosa ottiene la seguente policy AWS IAM?","Query SQL","Dati relativi alla sessione","Dati delle entità tra sessioni","Storia delle transazioni"]}}]