[
  {
    "question": "What is the main benefit of using TypeScript over JavaScript?",
    "answers": [
      "It enforces type safety.",
      "It increases the execution speed of code.",
      "It simplifies the syntax.",
      "It reduces the size of the final bundle."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Qual è il principale vantaggio dell'utilizzo di TypeScript rispetto a JavaScript?",
        "Migliora la sicurezza dei tipi.",
        "Aumenta la velocità di esecuzione del codice.",
        "Semplifica la sintassi.",
        "Riduce le dimensioni del pacchetto finale."
      ]
    }
  },
  {
    "question": "Which of the following is a TypeScript primitive type?",
    "answers": ["Number", "Integer", "Character", "Symbol"],
    "correct": 0,
    "translations": {
      "it": [
        "Quale dei seguenti è un tipo primitivo di TypeScript?",
        "Number",
        "Integer",
        "Character",
        "Symbol"
      ]
    }
  },
  {
    "question": "What does the 'extends' keyword do in TypeScript?",
    "answers": [
      "It allows a class to inherit properties and methods from another class.",
      "It combines multiple classes into one.",
      "It automatically generates a constructor.",
      "It assigns a default value to a variable."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Cosa fa la parola chiave 'extends' in TypeScript?",
        "Permette a una classe di ereditare proprietà e metodi da un'altra classe.",
        "Combina più classi in una.",
        "Genera automaticamente un costruttore.",
        "Assegna un valore predefinito a una variabile."
      ]
    }
  },
  {
    "question": "Given the following TypeScript code, what will be the output?",
    "answers": [
      "It will print 'hello'.",
      "It will print '10'.",
      "It will throw an error.",
      "It will print 'undefined'."
    ],
    "correct": 2,
    "code": "let myVar: number = 10;\nmyVar = 'hello';\nconsole.log(myVar);",
    "translations": {
      "it": [
        "Dato il seguente codice TypeScript, quale sarà l'output?",
        "Stampere 'hello'.",
        "Stampere '10'.",
        "Genererà un errore.",
        "Stampere 'undefined'."
      ]
    }
  },
  {
    "question": "What is the difference between 'interface' and 'type' in TypeScript?",
    "answers": [
      "Interfaces can be extended, types cannot.",
      "Types can be extended, interfaces cannot.",
      "Interfaces are more powerful and can represent functions.",
      "There is no difference."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Qual è la differenza tra 'interface' e 'type' in TypeScript?",
        "Le interfacce possono essere estese, i tipi no.",
        "I tipi possono essere estesi, le interfacce no.",
        "Le interfacce sono più potenti e possono rappresentare funzioni.",
        "Non c'è alcuna differenza."
      ]
    }
  },
  {
    "question": "What is the purpose of the 'readonly' modifier in TypeScript?",
    "answers": [
      "To make a property immutable.",
      "To export a variable.",
      "To define a numeric constant.",
      "To make a function read-only."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Qual è lo scopo del modificatore 'readonly' in TypeScript?",
        "Rendere una proprietà immutabile.",
        "Esportare una variabile.",
        "Definire una costante numerica.",
        "Rendere una funzione di sola lettura."
      ]
    }
  },
  {
    "question": "What will be the output of the following TypeScript code?",
    "answers": ["Undefined", "0", "Null", "An error will be thrown"],
    "correct": 0,
    "code": "type User = { name: string, age?: number };\nlet user: User = { name: 'John' };\nconsole.log(user.age);",
    "translations": {
      "it": [
        "Quale sarà l'output del seguente codice TypeScript?",
        "Undefined",
        "0",
        "Null",
        "Genererà un errore"
      ]
    }
  },
  {
    "question": "Which of the following methods is used to check if an object conforms to a type in TypeScript?",
    "answers": ["'typeof'", "'instanceof'", "'in'", "'is'"],
    "correct": 1,
    "translations": {
      "it": [
        "Quale dei seguenti metodi viene utilizzato per verificare se un oggetto è conforme a un tipo in TypeScript?",
        "'typeof'",
        "'instanceof'",
        "'in'",
        "'is'"
      ]
    }
  },
  {
    "question": "What will be the output of the following TypeScript code?",
    "answers": ["Green", "1", "undefined", "An error will be thrown"],
    "correct": 1,
    "code": "enum Colors { Red, Green, Blue }\nlet color: Colors = Colors.Green;\nconsole.log(color);",
    "translations": {
      "it": [
        "Quale sarà l'output del seguente codice TypeScript?",
        "Green",
        "1",
        "undefined",
        "Genererà un errore"
      ]
    }
  },
  {
    "question": "How can you define an array of numbers in TypeScript?",
    "answers": [
      "let numbers: number[];",
      "let numbers: Array<number>;",
      "Both 1 and 2 are correct",
      "let numbers: [number];"
    ],
    "correct": 2,
    "translations": {
      "it": [
        "Come puoi definire un array di numeri in TypeScript?",
        "let numbers: number[];",
        "let numbers: Array<number>;",
        "Entrambi 1 e 2 sono corretti",
        "let numbers: [number];"
      ]
    }
  }
]
