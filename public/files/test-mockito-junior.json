[
  {
    "question": "Which annotation is used to create a mock object in Mockito?",
    "answers": ["@Mock", "@Test", "@InjectMocks", "@RunWith"],
    "correct": 0,
    "translations": {
      "it": [
        "Quale annotazione viene utilizzata per creare un oggetto mock in Mockito?",
        "@Mock",
        "@Test",
        "@InjectMocks",
        "@RunWith"
      ]
    }
  },
  {
    "question": "What is the purpose of the `when` method in Mockito?",
    "answers": [
      "To verify the number of times a method is called",
      "To specify the behavior of a mock object",
      "To inject dependencies",
      "To create a new instance of a class"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Qual è lo scopo del metodo `when` in Mockito?",
        "Verificare il numero di volte che un metodo viene chiamato",
        "Specificare il comportamento di un oggetto mock",
        "Iniettare dipendenze",
        "Creare una nuova istanza di una classe"
      ]
    }
  },
  {
    "question": "How do you verify if a method was called in Mockito?",
    "answers": ["assert", "validate", "verify", "check"],
    "correct": 2,
    "translations": {
      "it": [
        "Come verifichi se un metodo è stato chiamato in Mockito?",
        "assert",
        "validate",
        "verify",
        "check"
      ]
    }
  },
  {
    "question": "What is the use of the `@InjectMocks` annotation in Mockito?",
    "answers": [
      "To create a mock object",
      "To inject mock dependencies into the tested class",
      "To indicate a method is a test case",
      "To specify a method should be run with a certain runner"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Qual è l'uso dell’annotazione `@InjectMocks` in Mockito?",
        "Creare un oggetto mock",
        "Iniettare dipendenze mock nella classe testata",
        "Indicare che un metodo è un caso di test",
        "Specificare che un metodo deve essere eseguito con un certo runner"
      ]
    }
  },
  {
    "question": "Identify the incorrect statement about the Mockito framework.",
    "answers": [
      "Mockito is used for integration testing",
      "Mockito helps in creating mock objects for testing purposes",
      "Mockito is primarily used for unit testing",
      "Mockito reduces dependencies when testing"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Individua l'affermazione errata sul framework Mockito.",
        "Mockito viene utilizzato per i test di integrazione",
        "Mockito aiuta a creare oggetti mock per scopi di test",
        "Mockito è utilizzato principalmente per i test unitari",
        "Mockito riduce le dipendenze durante i test"
      ]
    }
  },
  {
    "question": "What would be the result of executing the following code in a test?",
    "answers": [
      "Method processPayment() will be called once.",
      "Method processPayment() will be called twice.",
      "Method processPayment() will not be called.",
      "Method processPayment() will throw an exception."
    ],
    "correct": 0,
    "code": "public class PaymentServiceTest {\n  @Mock\n  PaymentProcessor paymentProcessor;\n  @InjectMocks\n  PaymentService paymentService;\n  \n  @Test\n  public void testProcessPayment() {\n    paymentService.processPayment();\n    verify(paymentProcessor, times(1)).process(any(Payment.class));\n  }\n}",
    "translations": {
      "it": [
        "Quale sarà il risultato dell'esecuzione del seguente codice in un test?",
        "Il metodo processPayment() verrà chiamato una volta.",
        "Il metodo processPayment() verrà chiamato due volte.",
        "Il metodo processPayment() non verrà chiamato.",
        "Il metodo processPayment() lancerà un'eccezione."
      ]
    }
  },
  {
    "question": "What will happen when the following code is executed?",
    "answers": [
      "Method save() will be called once.",
      "Method save() will not be called.",
      "Method save() will be called multiple times.",
      "An exception will be thrown."
    ],
    "correct": 1,
    "code": "public class UserServiceTest {\n  @Mock\n  UserRepository userRepository;\n  @InjectMocks\n  UserService userService;\n  \n  @Test\n  public void testCreateUser() {\n    User user = new User(\"john@example.com\");\n    doNothing().when(userRepository).save(user);\n    // No call to userService.createUser(user) \n    verify(userRepository, never()).save(user);\n  }\n}",
    "translations": {
      "it": [
        "Cosa succede quando viene eseguito il seguente codice?",
        "Il metodo save() verrà chiamato una volta.",
        "Il metodo save() non verrà chiamato.",
        "Il metodo save() verrà chiamato più volte.",
        "Verrà lanciata un'eccezione."
      ]
    }
  },
  {
    "question": "In the context of the following test, what does the `verify` function do?",
    "answers": [
      "Confirms a method was called a certain number of times",
      "Injects a mock object",
      "Initializes mock objects",
      "Schedules a test to be executed later"
    ],
    "correct": 0,
    "code": "public class OrderServiceTest {\n  @Mock\n  OrderRepository orderRepository;\n  @InjectMocks\n  OrderService orderService;\n  \n  @Test\n  public void testPlaceOrder() {\n    orderService.placeOrder(new Order());\n    verify(orderRepository, times(1)).save(any(Order.class));\n  }\n}",
    "translations": {
      "it": [
        "Nel contesto del seguente test, cosa fa la funzione `verify`?",
        "Conferma che un metodo è stato chiamato un certo numero di volte",
        "Inietta un oggetto mock",
        "Inizializza oggetti mock",
        "Pianifica un test da eseguire successivamente"
      ]
    }
  },
  {
    "question": "What is the role of `@RunWith(MockitoJUnitRunner.class)` in a test class?",
    "answers": [
      "To mark the class as a mock object",
      "To run the test with a specific test runner",
      "To initialize values during test execution",
      "To specify dependencies for injection"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Qual è il ruolo di `@RunWith(MockitoJUnitRunner.class)` in una classe di test?",
        "Per contrassegnare la classe come oggetto mock",
        "Eseguire il test con un runner di test specifico",
        "Inizializzare valori durante l'esecuzione del test",
        "Specificare dipendenze per l'iniezione"
      ]
    }
  },
  {
    "question": "Which method is used in Mockito to mock the behavior of a void method?",
    "answers": ["doThrow", "doAnswer", "doNothing", "doReturn"],
    "correct": 2,
    "translations": {
      "it": [
        "Quale metodo viene utilizzato in Mockito per simulare il comportamento di un metodo void?",
        "doThrow",
        "doAnswer",
        "doNothing",
        "doReturn"
      ]
    }
  }
]
