[
  {
    "question": "What is Angular?",
    "answers": [
      "A server-side framework",
      "A front-end web framework",
      "A database management system",
      "A programming language"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Cos'è Angular?",
        "Un framework lato server",
        "Un framework web frontend",
        "Un sistema di gestione di database",
        "Un linguaggio di programmazione"
      ]
    }
  },
  {
    "question": "Which of the following is a key feature of Angular?",
    "answers": [
      "Two-way data binding",
      "Built-in SQL queries",
      "Code compilation",
      "JavaScript-only environment"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Quale delle seguenti è una caratteristica chiave di Angular?",
        "Associazione dati bidirezionale",
        "Query SQL integrate",
        "Compilazione del codice",
        "Ambiente solo JavaScript"
      ]
    }
  },
  {
    "question": "What does the '@Component' decorator do in Angular?",
    "answers": [
      "Defines a new service",
      "Creates a new route",
      "Allows for dependency injection",
      "Defines metadata for a component"
    ],
    "correct": 3,
    "translations": {
      "it": [
        "Cosa fa il decoratore '@Component' in Angular?",
        "Define un nuovo servizio",
        "Crea una nuova rotta",
        "Consente l'iniezione di dipendenze",
        "Definisce i metadati per un componente"
      ]
    }
  },
  {
    "question": "Which lifecycle hook is called after Angular has initialized all data-bound properties?",
    "answers": ["ngOnInit", "ngAfterViewInit", "ngOnChanges", "ngOnDestroy"],
    "correct": 0,
    "translations": {
      "it": [
        "Quale lifecycle hook viene chiamato dopo che Angular ha inizializzato tutte le proprietà legate ai dati?",
        "ngOnInit",
        "ngAfterViewInit",
        "ngOnChanges",
        "ngOnDestroy"
      ]
    }
  },
  {
    "question": "What is Angular CLI?",
    "answers": [
      "A command-line interface to scaffold and manage Angular applications",
      "A library for server-side rendering",
      "A style guide for Angular development",
      "A debugging tool for Angular"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Cos'è Angular CLI?",
        "Una interfaccia a riga di comando per scaffold e gestione delle applicazioni Angular",
        "Una libreria per il rendering lato server",
        "Una guida di stile per lo sviluppo Angular",
        "Uno strumento di debug per Angular"
      ]
    }
  },
  {
    "question": "What is the output of the following Angular code?",
    "answers": [
      "Hello World",
      "Hello Angular",
      "Hello TypeScript",
      "No output"
    ],
    "correct": 1,
    "code": "@Component({\n  selector: 'app-root',\n  template: '<h1>Hello {{name}}</h1>'\n})\nexport class AppComponent {\n  name = 'Angular';\n}",
    "translations": {
      "it": [
        "Qual è l'output del seguente codice Angular?",
        "Hello World",
        "Hello Angular",
        "Hello TypeScript",
        "Nessun output"
      ]
    }
  },
  {
    "question": "What is the purpose of the 'router-outlet' directive in Angular?",
    "answers": [
      "To declare a new component",
      "To create a service",
      "To serve as a placeholder for dynamic content based on the activated route",
      "To format the styles"
    ],
    "correct": 2,
    "translations": {
      "it": [
        "Qual è lo scopo della direttiva 'router-outlet' in Angular?",
        "Dichiarare un nuovo componente",
        "Creare un servizio",
        "Servire come segnaposto per contenuti dinamici basati sulla rotta attivata",
        "Formattare gli stili"
      ]
    }
  },
  {
    "question": "How do you bind an event to a method in Angular?",
    "answers": [
      "[click]='method()'",
      "(click)='method()'",
      "{click}='method()'",
      "(click)='method'"
    ],
    "correct": 1,
    "code": "<button (click)='method()'>Click me</button>",
    "translations": {
      "it": [
        "Come si associa un evento a un metodo in Angular?",
        "[click]='method()'",
        "(click)='method()'",
        "{click}='method()'",
        "(click)='method'"
      ]
    }
  },
  {
    "question": "What is a difference between a service and a component in Angular?",
    "answers": [
      "A component is used for UI, a service is used for business logic",
      "A service uses templates, a component does not",
      "A component can be injected, a service cannot",
      "A service is instantiate with @Component, a component with @Injectable"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Qual è la differenza tra un servizio e un componente in Angular?",
        "Un componente è usato per la UI, un servizio per la logica di business",
        "Un servizio usa i template, un componente no",
        "Un componente può essere iniettato, un servizio no",
        "Un servizio viene istanziato con @Component, un componente con @Injectable"
      ]
    }
  },
  {
    "question": "What will be the result of the following Angular code?",
    "answers": [
      "A button with text 'Save'",
      "A button with text 'Submit'",
      "An error",
      "A button with no text"
    ],
    "correct": 2,
    "code": "@Component({\n  selector: 'app-button',\n  template: '<button>{{text}}</button>'\n})\nexport class ButtonComponent {\n  text: 'Save';\n}",
    "translations": {
      "it": [
        "Quale sarà il risultato del seguente codice Angular?",
        "Un pulsante con il testo 'Salva'",
        "Un pulsante con il testo 'Invia'",
        "Un errore",
        "Un pulsante senza testo"
      ]
    }
  }
]
