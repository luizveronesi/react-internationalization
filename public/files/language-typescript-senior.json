[
  {
    "question": "What is the purpose of TypeScript's 'never' type?",
    "answers": [
      "It's used for special conditions like unauthorized, so it will never exit.",
      "It's a type that should never happen, like error conditions or infinite loops.",
      "It's used to explicitly infer the absence of values.",
      "It's used to handle async operations."
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Qual è lo scopo del tipo 'never' di TypeScript?",
        "Viene utilizzato per condizioni speciali come non autorizzato, quindi non uscirà mai.",
        "È un tipo che non dovrebbe mai accadere, come condizioni di errore o cicli infiniti.",
        "Viene utilizzato per inferire esplicitamente l'assenza di valori.",
        "Viene utilizzato per gestire operazioni asincrone."
      ]
    }
  },
  {
    "question": "Which of the following is true about interfaces in TypeScript?",
    "answers": [
      "Interfaces can be used to define the signature of functions.",
      "Interfaces cannot extend other interfaces.",
      "Interfaces can be instantiated directly.",
      "Interfaces cannot have optional properties."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Quale delle seguenti affermazioni è vera riguardo alle interfacce in TypeScript?",
        "Le interfacce possono essere utilizzate per definire la firma delle funzioni.",
        "Le interfacce non possono estendere altre interfacce.",
        "Le interfacce non possono essere istanziate direttamente.",
        "Le interfacce non possono avere proprietà opzionali."
      ]
    }
  },
  {
    "question": "Analyze the following TypeScript code and identify the issue:",
    "answers": [
      "Type mismatch: 'result' should be a number.",
      "Variable 'y' is not defined.",
      "Function 'calculate' should return a string.",
      "There is no issue with this code."
    ],
    "correct": 1,
    "code": "function calculate(x: number): number {\n return x + y; \n}",
    "translations": {
      "it": [
        "Analizza il seguente codice TypeScript e identifica il problema:",
        "Incompatibilità di tipo: 'result' dovrebbe essere un numero.",
        "La variabile 'y' non è definita.",
        "La funzione 'calculate' dovrebbe restituire una stringa.",
        "Non c'è alcun problema con questo codice."
      ]
    }
  },
  {
    "question": "What does the 'unknown' type represent in TypeScript?",
    "answers": [
      "A type that represents any value but requires a type check before usage.",
      "A type that can never be assigned any value.",
      "A type that forces the value to be null.",
      "A type that only allows undefined values."
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Cosa rappresenta il tipo 'unknown' in TypeScript?",
        "Un tipo che rappresenta qualsiasi valore ma richiede un controllo di tipo prima dell'uso.",
        "Un tipo che non può mai essere assegnato a nessun valore.",
        "Un tipo che forza il valore a essere nullo.",
        "Un tipo che consente solo valori indefiniti."
      ]
    }
  },
  {
    "question": "Explain the concept behind TypeScript's 'type guards'.",
    "answers": [
      "They guard against null and undefined values.",
      "They allow you to narrow down the type within a conditional block.",
      "They are used to protect against concurrent data modifications.",
      "They help to enforce immutability in objects."
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Spiega il concetto dietro i 'type guards' di TypeScript.",
        "Difendono da valori nulli e indefiniti.",
        "Consentono di restringere il tipo all'interno di un blocco condizionale.",
        "Vengono utilizzati per proteggere dalle modifiche di dati concorrenti.",
        "Aiutano a imporre l'immutabilità negli oggetti."
      ]
    }
  },
  {
    "question": "What issue does the following TypeScript code snippet have?",
    "answers": [
      "The 'if' condition is missing.",
      "The return type should be 'any'.",
      "The variable 'message' is used before declaration.",
      "The function should return a number."
    ],
    "correct": 2,
    "code": "function greet(name: string): string {\n console.log(message);\n let message = `Hello, ${name}`;\n return message; \n}",
    "translations": {
      "it": [
        "Quale problema ha il seguente frammento di codice TypeScript?",
        "Manca la condizione 'if'.",
        "Il tipo di ritorno dovrebbe essere 'any'.",
        "La variabile 'message' viene utilizzata prima della dichiarazione.",
        "La funzione dovrebbe restituire un numero."
      ]
    }
  },
  {
    "question": "What does the '?' operator signify in TypeScript?",
    "answers": [
      "It signifies a required property.",
      "It signifies an optional property or parameter.",
      "It signifies a constant value.",
      "It signifies an infinite loop."
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Cosa significa l'operatore '?' in TypeScript?",
        "Indica una proprietà richiesta.",
        "Indica una proprietà o un parametro opzionale.",
        "Indica un valore costante.",
        "Indica un ciclo infinito."
      ]
    }
  },
  {
    "question": "Analyze the following TypeScript snippet. What is the problem?",
    "answers": [
      "The 'name' variable is declared twice.",
      "Template literals cannot contain variables.",
      "The function does not return a value.",
      "The variable 'greeting' is assigned a wrong data type."
    ],
    "correct": 0,
    "code": "let name = 'John';\n let name = 'Doe';",
    "translations": {
      "it": [
        "Analizza il seguente snippet TypeScript. Qual è il problema?",
        "La variabile 'name' è dichiarata due volte.",
        "I letterali template non possono contenere variabili.",
        "La funzione non restituisce un valore.",
        "La variabile 'greeting' è assegnata a un tipo di dato errato."
      ]
    }
  },
  {
    "question": "What is the advantage of using TypeScript's 'readonly' modifier?",
    "answers": [
      "It makes an object immutable.",
      "It allows the property to be changed only once.",
      "It prevents the property from being modified outside its declaration.",
      "It allows the property to be accessed but not iterated."
    ],
    "correct": 2,
    "translations": {
      "it": [
        "Qual è il vantaggio dell'utilizzo del modificatore 'readonly' di TypeScript?",
        "Rende un oggetto immutabile.",
        "Consente di modificare la proprietà solo una volta.",
        "Impedisce che la proprietà venga modificata al di fuori della sua dichiarazione.",
        "Consente di accedere alla proprietà ma non di iterarla."
      ]
    }
  },
  {
    "question": "What is the output of the following TypeScript code?",
    "answers": [
      "Error: Cannot implicitly convert type 'string' to 'number'.",
      "Type of variable 'result' is never.",
      "'Sum is 10'.",
      "Error: Missing return statement."
    ],
    "correct": 0,
    "code": "let result: number = '10' as any + 10;\nconsole.log(`Sum is ${result}`);",
    "translations": {
      "it": [
        "Qual è l'output del seguente codice TypeScript?",
        "Errore: impossibile convertire implicitamente il tipo 'string' in 'number'.",
        "Il tipo della variabile 'result' è never.",
        "'Sum is 10'.",
        "Errore: manca l'istruzione di ritorno."
      ]
    }
  }
]
