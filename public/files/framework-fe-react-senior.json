[
  {
    "question": "What is the main benefit of using React's Context API?",
    "answers": [
      "Improves the performance of React components",
      "Enables global state management without prop drilling",
      "Makes the application more secure",
      "Allows for better styling of React components"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Qual è il principale vantaggio dell'utilizzo dell'API Context di React?",
        "Migliora le prestazioni dei componenti React",
        "Permette la gestione dello stato globale senza prop drilling",
        "Rende l'applicazione più sicura",
        "Consente una migliore stilizzazione dei componenti React"
      ]
    }
  },
  {
    "question": "What is React.memo used for?",
    "answers": [
      "To handle error boundaries in React",
      "To memoize the result of a function",
      "To optimize functional components by memoizing their output",
      "To create higher-order components"
    ],
    "correct": 2,
    "translations": {
      "it": [
        "Per cosa viene utilizzato React.memo?",
        "Per gestire i boundary degli errori in React",
        "Per memorizzare il risultato di una funzione",
        "Per ottimizzare i componenti funzionali memorizzando la loro uscita",
        "Per creare componenti di ordine superiore"
      ]
    }
  },
  {
    "question": "What will be the output of the following code?",
    "answers": [
      "Button clicked: 0",
      "Button clicked: 1",
      "Button clicked: 2",
      "Button clicked: 3"
    ],
    "correct": 3,
    "code": "import React, { useState, useCallback } from 'react';\n\nconst ClickCounter = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = useCallback(() => {\n    setCount(count + 1);\n  }, [count]);\n\n  return (\n    <button onClick={handleClick}>Button clicked: {count}</button>\n  );\n};\n\nexport default ClickCounter;",
    "translations": {
      "it": [
        "Quale sarà l'output del seguente codice?",
        "Button clicked: 0",
        "Button clicked: 1",
        "Button clicked: 2",
        "Button clicked: 3"
      ]
    }
  },
  {
    "question": "Which lifecycle method is called after a component's updates are flushed to the DOM in class components?",
    "answers": [
      "componentDidMount",
      "componentDidUpdate",
      "componentWillUnmount",
      "shouldComponentUpdate"
    ],
    "correct": 1,
    "translations": {
      "it": [
        "Quale metodo del ciclo di vita viene chiamato dopo che gli aggiornamenti di un componente sono stati scaricati nel DOM nei componenti di classe?",
        "componentDidMount",
        "componentDidUpdate",
        "componentWillUnmount",
        "shouldComponentUpdate"
      ]
    }
  },
  {
    "question": "What is the purpose of the 'key' prop in React lists?",
    "answers": [
      "To uniquely identify each element in the list to maintain the element's identity across updates",
      "To provide a default value for list items",
      "To bind event listeners to list items",
      "To specify the type of elements in the list"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Qual è lo scopo della prop 'key' nelle liste di React?",
        "Per identificare in modo univoco ogni elemento nella lista per mantenere l'identità dell'elemento durante gli aggiornamenti",
        "Per fornire un valore predefinito per gli elementi della lista",
        "Per associare i listeners degli eventi agli elementi della lista",
        "Per specificare il tipo di elementi nella lista"
      ]
    }
  },
  {
    "question": "What will be the output of the following code segment?",
    "answers": ["First", "Second", "Third", "Fourth"],
    "correct": 0,
    "code": "import React, { useEffect } from 'react';\n\nconst TestComponent = () => {\n  useEffect(() => {\n    console.log('First');\n    return () => {\n      console.log('Third');\n    };\n  }, []);\n\n  useEffect(() => {\n    console.log('Second');\n    return () => {\n      console.log('Fourth');\n    };\n  }, []);\n\n  return <div>Test</div>;\n};\n\nexport default TestComponent;",
    "translations": {
      "it": [
        "Quale sarà l'output del seguente segmento di codice?",
        "First",
        "Second",
        "Third",
        "Fourth"
      ]
    }
  },
  {
    "question": "What does the React hook useReducer do?",
    "answers": [
      "Manages asynchronous state updates",
      "Provides a way to manage state pairs",
      "Brings the Redux pattern to manage state into function components",
      "Automates the re-rendering of components"
    ],
    "correct": 2,
    "translations": {
      "it": [
        "Cosa fa l'hook useReducer di React?",
        "Gestisce aggiornamenti di stato asincroni",
        "Fornisce un modo per gestire coppie di stato",
        "Introduce il pattern Redux per la gestione dello stato nei componenti a funzione",
        "Automatizza il ri-rendering dei componenti"
      ]
    }
  },
  {
    "question": "What is the expected output of the following code snippet?",
    "answers": ["React and Redux", "React", "Redux", "Neither React nor Redux"],
    "correct": 1,
    "code": "import React, { useState } from 'react';\n\nconst Example = () => {\n  const [value, setValue] = useState('React');\n\n  const handleClick = () => {\n    setValue('React and Redux');\n  };\n\n  return (\n    <div>\n      <button onClick={handleClick}>Change</button>\n      <div>{value}</div>\n    </div>\n  );\n};\n\nexport default Example;",
    "translations": {
      "it": [
        "Qual è l'output previsto del seguente frammento di codice?",
        "React e Redux",
        "React",
        "Redux",
        "Né React né Redux"
      ]
    }
  },
  {
    "question": "Which hook would you use to manage a side effect in a function component?",
    "answers": ["useEffect", "useContext", "useMemo", "useReducer"],
    "correct": 0,
    "translations": {
      "it": [
        "Quale hook utilizzeresti per gestire un effetto collaterale in un componente funzione?",
        "useEffect",
        "useContext",
        "useMemo",
        "useReducer"
      ]
    }
  },
  {
    "question": "How can you optimize rendering performance in a React function component?",
    "answers": [
      "By using the useCallback and useMemo hooks",
      "By removing all state variables",
      "By increasing the complexity of the component",
      "By nesting multiple components together"
    ],
    "correct": 0,
    "translations": {
      "it": [
        "Come puoi ottimizzare le prestazioni di rendering in un componente funzione React?",
        "Utilizzando i hook useCallback e useMemo",
        "Rimuovendo tutte le variabili di stato",
        "Aumentando la complessità del componente",
        "Nidificando più componenti insieme"
      ]
    }
  }
]
